name: iOS CI - Build and TestFlight

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-upload:
    runs-on: macos-latest
    env:
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      APP_IDENTIFIER: ${{ secrets.APP_IDENTIFIER }}
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}
      # Optional auth mechanisms for private match repo
      MATCH_GIT_PRIVATE_KEY: ${{ secrets.MATCH_GIT_PRIVATE_KEY }}
      MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install Homebrew dependencies
        run: |
          brew update
          brew install xcodegen

      - name: Generate Xcode project
        run: xcodegen generate

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Install gems
        run: bundle install --path vendor/bundle

      - name: Configure Git auth for match repo (HTTPS token)
        if: env.MATCH_GIT_TOKEN != ''
        run: |
          git config --global url."https://${{ env.MATCH_GIT_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Prepare SSH key from secret
        if: env.MATCH_GIT_PRIVATE_KEY != ''
        id: prep_match_key
        shell: bash
        run: |
          KEY="${{ env.MATCH_GIT_PRIVATE_KEY }}"
          # If the secret is single-line with literal \n, convert to real newlines
          if echo "$KEY" | grep -q '\\n'; then
            KEY="$(printf "%b" "$KEY")"
          fi
          # Normalize CRLF to LF
          KEY="$(echo "$KEY" | tr -d '\r')"
          # Quick validation to help debugging without printing the key
          if ! echo "$KEY" | grep -q 'BEGIN OPENSSH PRIVATE KEY'; then
            echo 'Note: Private key header missing. Ensure you used the PRIVATE key content.'
          fi
          # Emit processed key as output (multi-line)
          {
            echo 'key<<EOF'
            echo "$KEY"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Start ssh-agent and add match deploy key
        if: env.MATCH_GIT_PRIVATE_KEY != ''
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ steps.prep_match_key.outputs.key }}

      - name: Add GitHub to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "SSH agent ready; using $MATCH_GIT_URL"

      - name: Build and Upload to TestFlight
        run: bundle exec fastlane beta